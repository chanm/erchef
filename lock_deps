#!/usr/bin/env escript

%% @author Seth Falcon
%% @copyright 2011 Seth Falcon
%% @doc lock_deps: Generate Locked Dependencies for Rebar
%%
%% The lock_deps script generates an alternate rebar.config file that
%% lists every dependency of a project and locks it at a given git
%% revision using the `{tag, SHA}' syntax.
%%
%% Basic usage is:
%% ```
%% ./lock_deps deps [ignore...]
%% '''
%%
%% where `deps' is the directory containing project dependencies
%% followed by zero or more dependency names which should not be
%% locked (can be useful to test-only modules).
%%
%% See the README.md file for details on how to use the script in your
%% build and notes on implementation.
%%
-author("Seth Falcon <seth@userprimary.net>").
-export([main/1]).

main([DepsDir|Ignores]) ->
    Dirs = deps_dirs(DepsDir),
    DepVersions = get_dep_versions(Dirs),
    AllDeps = collect_deps(["."|Dirs]),
    NewDeps = get_locked_deps(DepVersions, AllDeps, Ignores),
    NewConfig = "./rebar.config.lock",
    write_rebar_lock("./rebar.config", NewConfig, NewDeps),
    io:format("wrote locked rebar config to: ~s~n", [NewConfig]),
    ok.

%% Create rebar dependency specs for each dep in `DepVersions' locked
%% to the SHA1 in `DepVersions'. Spec details are taken from
%% `AllDeps'. Dependencies, listed by name (atom) in `Ignores' are not
%% locked and the spec found in `AllDeps' is passed through.
%%
get_locked_deps(DepVersions, AllDeps, Ignores) ->
    IgnoreNames = [ list_to_atom(I) || I <- Ignores ],
    NewDeps = [ begin
                    DepSpec = lists:keyfind(Name, 1, AllDeps),
                    lock_dep(DepSpec, Sha)
                end
                || {Name, Sha} <- DepVersions,
                   lists:member(Name, IgnoreNames) =:= false ],
    IgnoreDeps0 = [ lists:keyfind(Name, 1, AllDeps) || Name <- IgnoreNames ],
    IgnoreDeps = [ D || D <- IgnoreDeps0, D =/= false ],
    io:format("locked ~b deps~n", [length(NewDeps)]),
    io:format("ignored ~b deps~n", [length(IgnoreDeps)]),
    IgnoreDeps ++ NewDeps.

%% Write a locked down rebar.config file to `NewPath' based on the
%% rebar.config file found at `OrigPath'.
write_rebar_lock(OrigPath, NewPath, NewDeps) ->
    {ok, Orig} = file:consult(OrigPath),
    New = lists:keyreplace(deps, 1, Orig, {deps, NewDeps}),
    {ok, F} = file:open(NewPath, [write]),
    [ io:fwrite(F, "~p.~n", [Item]) || Item <- New ],
    io:fwrite(F, "~s", ["\n"]),
    file:close(F),
    ok.

lock_dep({Name, _Version, {Git, Url, _Tag}}, Sha) ->
    {Name, ".*", {Git, Url, {tag, Sha}}}.

%% Find the git SHA1s of all the dependencies in `DepsDir' and return
%% as a list of {Name, Sha} tuples where Name is an atom and Sha is a
%% string.
get_dep_versions(Dirs) ->
    [ sha_for_project(D) || D <- Dirs ].

sha_for_project(Dir) ->
    Cmd = ["cd ", Dir, "; git rev-parse HEAD"],
    Sha = re:replace(os:cmd(Cmd), "\n$", "", [{return, list}]),
    {list_to_atom(filename:basename(Dir)), Sha}.

deps_dirs(Dir) ->
    [ D || D <- filelib:wildcard(Dir ++ "/*"), filelib:is_dir(D) ].

collect_deps(Dirs) ->
    %% Note that there may be duplicate entries
    lists:foldl(fun(Dir, Acc) ->
                        extract_deps(Dir) ++ Acc
                end, [], Dirs).

extract_deps(Dir) ->
    ConfigFile = Dir ++ "/rebar.config",
    case filelib:is_file(ConfigFile) of
        true ->
            {ok, Config} = file:consult(Dir ++ "/rebar.config"),
            case lists:keyfind(deps, 1, Config) of
                {deps, Deps} -> Deps;
                false -> []
            end;
        false -> []
    end.
